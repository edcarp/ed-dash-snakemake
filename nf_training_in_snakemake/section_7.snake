# In section 7 we actually get to make a pipeline. Let's Snake it!

# NextFlow has parameters, Snakemake has config

# Add some defaults. These can be overridden on the command line.
config.setdefault('reads', "data/ggal/{pair_id}_{readnum}.fq")
config.setdefault('transcriptome', "data/ggal/transcriptome.fa")
config.setdefault('multiqc', "multiqc")

# Ex 7.1.1
config.setdefault('outdir', "ex7_out")

# If the 'outdir' setting is set we have to make it so...
if config['outdir'] not in ['', '.', './']:
    os.makedirs(config['outdir'])

    # Before changing dir need to resolve the input paths
    for k in ['reads', 'transcriptome']:
        config[k] = os.path.abspath(config[k])

    # This directive basically just wraps setcwd()
    workdir: config['outdir']

# Ex 7.1.2
from pprint import pprint
pprint(("Config: ", config))

# Ex 7.2
# Note - the 'threads' directive sets a maximum. Snakemake will scale down.
rule index:
    output: directory("salmon_index")
    input: config['transcriptome']
    threads: 8
    shell:
       r"salmon index --threads {threads} -t {input} -i {output}"

# Ex 7.4
# Snakemake implementation of script4.nf

# Tell Snakemake that {readnum} wildcard is always 1 or 2 before asking to find the files.
wildcard_constraints:
    readnum = "[12]"

reads_in = glob_wildcards(config['reads'])

rule quantification:
    output: directory("{pair_id}.quant")
    input:
        reads = expand(config['reads'], readnum=['1','2'], allow_missing=True),
        index = "salmon_index"
    threads: 8
    shell:
        r"salmon quant --threads {threads} --libType=U -i {input.index} -1 {input.reads[0]} -2 {input.reads[1]} -o {output}"

# Rule to generate all quantification
rule all_quant:
    input: expand("{pair_id}.quant", pair_id=reads_in.pair_id)

